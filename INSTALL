Compilation instructions!  Temporary quick compilation instructions!
Will give better instructions later when things are in a more complete state.

Windows:
  - NOTE: OBS on windows currently requires VS2013, as obs-studio uses C99 and
    C++11.  Express might not be supported at this time (though I'll fix it at
    some point).

  - Clone the repo.  After cloning, run the following git commands:
        git submodule init
        git submodule update
    which will download submodules.

  - Download (or build) development packages of FFmpeg, x264, Qt5.

  - Download windows version of cmake from: http://www.cmake.org/

  - Add windows environment variables:
        FFMpegPath    (path to FFmpeg include directory)
        x264Path      (path to x264 include directory)
        QTDIR         (path to Qt build base directory)

    NOTE: Each of these environment variables can specify 32bit and 64bit by
    appending 32 and 64 to the end of the environment variable names.
    So if you want to separate locations for 32bit or 64bit, you can set:
    FFmpegPath32, FFmpegPath64, x264Path32, x264Path64, QTDIR32, QTDIR64, etc.

    NOTE: These variables are optional and these can be entered in to cmake
    while generating, but having these variables makes life much easier in case
    you need to regenerate your cmake data from scratch for whatever reason.

    NOTE: An example Qt directory you would use here if you installed Qt5 to
    D:\Qt would usually look something like this for the 32bit version:
        D:\Qt\5.3\msvc2013
    And something like this for the 64bit version
        D:\Qt\5.3\msvc2013_64

    NOTE: Search paths and search order for FFmpeg and x264 library/binary
    files, relative to their include directories:

        Library files
          ../lib
          ../lib32 (if 32bit)
          ../lib64 (if 64bit)
          ./lib
          ./lib32 (if 32bit)
          ./lib64 (if 64bit)

        Binary files:
          ../bin
          ../bin32 (if 32bit)
          ../bin64 (if 64bit)
          ./bin
          ./bin32 (if 32bit)
          ./bin64 (if 64bit)

  - Run cmake-gui.  In "where is the source code", enter in the repo directory
    (example: D:/obs).  In "where to build the binaries", enter the repo
    directory path with the 'build' subdirectory (example: D:/obs/build).

    NOTE: The subdirectories 'build', 'release', and 'debug' are meant for
    builds, and are excluded from the repo in .gitignore, so they are safe to
    use for building.

  - Press 'Configure', then enable the COPY_DEPENDENCIES option, then press
    'Configure' again, and then press 'Generate' to generate visual studio
    project files in the 'build' subdirectory.

  - Open obs-studio.sln from the 'build' subdirectory, and it should run and
    be good to go.  All required dependencies should be copied on compile and
    it should be a fully fuctional build environment.


Mac OSX
  - Use macports or homebrew and install FFmpeg, x264, Qt5, and cmake.

    NOTE: Qt5 can also be downloaded/installed via the Qt website, though keep
    in mind that you will have to set the QTDIR environment variable to the
    Qt5 build base directory.

  - Make sure to have the OSX 10.9 or newer SDK installed (comes with recent
    versions of Xcode)

  - In a terminal, go to the obs-studio directory create a 'build' sub
    directory and change to it, then to build, type:

      - on OSX 10.9 or newer:
          cmake .. && make
      - on OSX 10.8:
          MACOSX_DEPLOYMENT_TARGET=10.8 cmake -DCMAKE_OSX_SYSROOT=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk/ .. && make

  - It builds in a modular structure by default.  To run it via terminal, go to
    build/rundir/RelWithDebInfo/bin, then type ./obs to run.

    NOTE: If you are running via command prompt, you *must* be in the 'bin'
    directory specified above, otherwise it will not be able to find its files
    relative to the binary.

  - To create an app bundle instead, use the command: make package
    This will create a .dmg file with an app bundle inside.



Linux
  Ubuntu 14.04 Installation
    - FFmpeg is required.  If you do not have the FFmpeg installed (if you
      don't know, then you probably don't have it), you can get it with the
      following commands:

      sudo add-apt-repository ppa:jon-severinsson/ffmpeg
      sudo apt-get update && sudo apt-get install ffmpeg

    - Then you can install OBS with the following commands:

      sudo add-apt-repository ppa:obsproject/obs-studio
      sudo apt-get update && sudo apt-get install obs-studio


  Compile From Source
    - To start, you are going to need a fairly recent Linux distribution. Right
      now, for Ubuntu at least, only Ubuntu 14.04 or 14.10 will work. The
      reason for this is that older versions of Ubuntu use a version of libav
      that is so old, it just simply doesn't work.

    - In the event that you do not want to build ffmpeg yourself, you can use
      the PPA listed above for ffmpeg, and then install the needed
      dependencies:
        cmake libpulse-dev qtbase5-dev libqt5x11extras5-dev libavcodec-dev
        libavformat-dev libswscale-dev libx264-dev libswresample-dev
        libfdk-aac-dev libxinerama-dev libxcomposite-dev libxrandr-dev

    - If you are building ffmpeg from source, than you will need to install a
      few packages.
      
        APT-based Distros (Debian, Ubuntu, etc):
          apt-get install autoconf build-essential checkinstall git
          libass-dev libtheora-dev libtool libva-dev libvdpau-dev
          libvorbis-dev libx11-dev libxext-dev libxfixes-dev pkg-config
          texi2html zlib1g-dev libpulse-dev libv4l-dev libudev-dev
        
        RPM-based distros (RHEL, Fedora, OpenSUSE, etc):
          yum groupinstall "Development Tools" "Development Libraries"
          yum install git libass-devel libtheora-devel libtool-ltdl-devel
          libva-devel libvdpau-devel libvorbis-devel libX11-devel
          libXext-devel libXfixes-devel pkgconfig texi2html zlib-devel
          pulseaudio-libs-devel libv4l-devel libudev-devel
            
          Checkinstall is not available for RPM-based distros, so you can
          compile it from source, or you can substitute all checkinstall
          commands with:
            sudo make install


    - Building the software
      
        In order to build OBS Studio, you need to have ffmpeg installed, you can
        do this using the PPA listed above or by compiling it from source. For
        information on how to compile ffmpeg from source , you can go to the
        link below:
          https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu


      OBS Studio
        
        To build OBS studio, from somewhere on your system, preferably in your
        home folder, execute the following commands:
    
          git clone https://github.com/jp9000/obs-studio.git
          cd obs-studio
          mkdir build && cd build
          cmake -DUNIX_STRUCTURE=1 -DCMAKE_INSTALL_PREFIX=/usr ..
          make
          sudo checkinstall --pkgname=obs-studio \
            --pkgversion="$(date +%Y%m%d)-git" --backup=no --deldoc=yes \
            --fstrans=no --default

      OBS Studio in portable mode
      
        In the event that you want to build OBS as a portable application, you
        can execute the following commands in place of the ones executed
        earlier:
    
          mkdir build && cd build
          cmake -DUNIX_STRUCTURE=0 \
            -DCMAKE_INSTALL_PREFIX="${HOME}/obs-studio-portable" ..
          make -j4 && make install
      
        After that you should have a portable install in ~/obs-studio-portable
        Change to bin/64bit or bin/32bit and run ./obs to run it.
