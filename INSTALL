Compilation instructions!  Temporary quick compilation instructions!
Will give better instructions later when things are in a more complete state.

Windows:
  - NOTE: OBS on windows currently requires VS2013, as obs-studio uses C99 and
    C++11.  Express might not be supported at this time (though I'll fix it at
    some point).

  - Clone the repo.  After cloning, run the following git commands:
        git submodule init
        git submodule update
    which will download submodules.

  - Download (or build) development packages of FFmpeg, x264, Qt5.

  - Download windows version of cmake from: http://www.cmake.org/

  - Add windows environment variables:
        FFMpegPath    (path to FFmpeg include directory)
        x264Path      (path to x264 include directory)
        QTDIR         (path to Qt build base directory)

    NOTE: Each of these environment variables can specify 32bit and 64bit by
    appending 32 and 64 to the end of the environment variable names.
    So if you want to separate locations for 32bit or 64bit, you can set:
    FFmpegPath32, FFmpegPath64, x264Path32, x264Path64, QTDIR32, QTDIR64, etc.

    NOTE: These variables are optional and these can be entered in to cmake
    while generating, but having these variables makes life much easier in case
    you need to regenerate your cmake data from scratch for whatever reason.

    NOTE: An example Qt directory you would use here if you installed Qt5 to
    D:\Qt would usually look something like this for the 32bit version:
        D:\Qt\5.3\msvc2013
    And something like this for the 64bit version
        D:\Qt\5.3\msvc2013_64

    NOTE: Search paths and search order for FFmpeg and x264 library/binary
    files, relative to their include directories:

        Library files
          ../lib
          ../lib32 (if 32bit)
          ../lib64 (if 64bit)
          ./lib
          ./lib32 (if 32bit)
          ./lib64 (if 64bit)

        Binary files:
          ../bin
          ../bin32 (if 32bit)
          ../bin64 (if 64bit)
          ./bin
          ./bin32 (if 32bit)
          ./bin64 (if 64bit)

  - Run cmake-gui.  In "where is the source code", enter in the repo directory
    (example: D:/obs).  In "where to build the binaries", enter the repo
    directory path with the 'build' subdirectory (example: D:/obs/build).

    NOTE: The subdirectories 'build', 'release', and 'debug' are meant for
    builds, and are excluded from the repo in .gitignore, so they are safe to
    use for building.

  - Press 'Configure', then enable the COPY_DEPENDENCIES option, then press
    'Configure' again, and then press 'Generate' to generate visual studio
    project files in the 'build' subdirectory.

  - Open obs-studio.sln from the 'build' subdirectory, and it should run and
    be good to go.  All required dependencies should be copied on compile and
    it should be a fully fuctional build environment.


Mac OSX
  - Use macports or homebrew and install FFmpeg, x264, Qt5, and cmake.

    NOTE: Qt5 can also be downloaded/installed via the Qt website, though keep
    in mind that you will have to set the QTDIR environment variable to the
    Qt5 build base directory.

  - Make sure to have the OSX 10.9 or newer SDK installed (comes with recent
    versions of Xcode)

  - In a terminal, go to the obs-studio directory create a 'build' sub
    directory and change to it, then to build, type:

      - on OSX 10.9 or newer:
          cmake .. && make
      - on OSX 10.8:
          MACOSX_DEPLOYMENT_TARGET=10.8 cmake -DCMAKE_OSX_SYSROOT=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk/ .. && make

  - It builds in a modular structure by default.  To run it via terminal, go to
    build/rundir/RelWithDebInfo/bin, then type ./obs to run.

    NOTE: If you are running via command prompt, you *must* be in the 'bin'
    directory specified above, otherwise it will not be able to find its files
    relative to the binary.

  - To create an app bundle instead, use the command: make package
    This will create a .dmg file with an app bundle inside.



Linux
	Install from PPA (Ubuntu 14.04 only)
		- If you are unsure about compiling the software from source yourself, and
		  you happen to be using Ubuntu 14.04, then you can install OBS Studio via
		  the PPA repository by entering the following commands:

			sudo add-apt-repository ppa:obsproject/obs-studio
			sudo apt-get update && sudo apt-get install obs-studio

		- There is still one thing that needs to be addressed, Ubuntu uses libav
		  instead of ffmpeg, so you need to install ffmpeg, this can also be done
		  via a PPA repository by entering the following commands:
			
			sudo add-apt-repository ppa:jon-severinsson/ffmpeg
			sudo apt-get update && sudo apt-get install ffmpeg


  Compile From Source
    - To start, you are going to need a fairly recent Linux distribution. Right
			now, for Ubuntu at least, only Ubuntu 14.04 or 14.10 will work. The
			reason for this is that older versions of Ubuntu use a version of libav
			that is so old, it just simply doesn't work.

		- In the event that you do not want to build ffmpeg yourself, you can use
			the PPA listed above for ffmpeg, and then install the needed dependencies:
        cmake libpulse-dev qtbase5-dev libqt5x11extras5-dev libavcodec-dev
    	  libavformat-dev libswscale-dev libx264-dev libswresample-dev
    	  libfdk-aac-dev libxinerama-dev libxcomposite-dev libxrandr-dev

    - If you are building ffmpeg from source, than you will need to install a
			few packages.
			
          Aptitiude-based Distros (Debian, Ubuntu, etc):
            apt-get install autoconf build-essential checkinstall git
            libass-dev libtheora-dev libtool libva-dev libvdpau-dev
            libvorbis-dev libx11-dev libxext-dev libxfixes-dev pkg-config
            texi2html zlib1g-dev libpulse-dev libv4l-dev libudev-dev
        
          RPM-based distros (RHEL, Fedora, OpenSUSE, etc):
            yum groupinstall "Development Tools" "Development Libraries"
            yum install git libass-devel libtheora-devel libtool-ltdl-devel
            libva-devel libvdpau-devel libvorbis-devel libX11-devel
            libXext-devel libXfixes-devel pkgconfig texi2html zlib-devel
            pulseaudio-libs-devel libv4l-devel libudev-devel
            
            Checkinstall is not available for RPM-based distros, so you can
            compile it from source, or you can substitute all checkinstall
            commands with:
              sudo make install


    - Building the software
      Now that we have all of the neccessary packages installed, we can
      continue with the build process. First, we need to compile some
      prerequisites for FFMPEG.
      
      You can build the software wherever on your system you feel comfortable
      doing so. For the sake of this tutorial, we will be building from a
      directory in our home directory called ~/source.
      
        mkdir ~/source && cd ~/source
        
      Now that we have our build directory setup, we can start building
      packages for OBS. There is only 1 dependecy we are going to build from
      source, ffmpeg, but ffmpeg has it's own dependencies. Please note that
      we are not building a complete version of ffmpeg, only what is required
      to make OBS run.
      
      When issuing the make command, if you are using a multi-core or
      multi-threaded processor, you can use -j parameter to specify how many
      files are allowed to build at any one time, which can significantly
      lower build times. Normally, I set this parameter to 2 times the number
      of threads my processor can run. Since I have an Intel Core i5-3230M, I
      have 2 cores and 4 threads, so I usually use -j8 when building software.
      If you don't know how many cores or threads your CPU has, you can run
      the command:
        cat /proc/cpuinfo


      - YASM
      Yasm is not required to build ffmpeg, but according to the ffmpeg docs,
      this is the preferred assember to use for building ffmpeg. So, from the
      source directory we created earlier, execute the following commands:
      
        wget http://www.tortall.net/projects/yasm/releases/yasm-1.2.0.tar.gz
        tar xzvf yasm-1.2.0.tar.gz
        cd yasm-1.2.0
        ./configure
        make
        sudo checkinstall --pkgname=yasm --pkgversion="1.2.0" --backup=no \
          --deldoc=yes --fstrans=no --default
          
      and your done.
      
      - x264
      Once again, we need to cd into our source directory we created earlier,
      and this time we are going to execute the following commands:
      
        git clone --depth 1 git://git.videolan.org/x264
        cd x264
        ./configure --enable-shared
        make
        sudo checkinstall --pkgname=x264 --pkgversion="3:$(./version.sh | \
          awk -F'[" ]' '/POINT/{print $4"+git"$5}')" --backup=no --deldoc=yes \
          --fstrans=no --default
      
      and once again, that's it. This will enable the H.264 encoder for ffmpeg.
      
      - FDK-AAC
      This package is optional becuase OBS comes with it's own built-in AAC
      encoder, and it does a perfectly acceptable job, however in the event that
      you with to use FDK instead, simply cd back to your source directory, and
      execute the following commands:
      
        git clone --depth 1 git://github.com/mstorsjo/fdk-aac.git
        cd fdk-aac
        autoreconf -fiv
        ./configure --enable-shared
        make
        sudo checkinstall --pkgname=fdk-aac --pkgversion="$(date +%Y%m%d)-git" \
          --backup=no --deldoc=yes --fstrans=no --default
      
      - ffmpeg
      Now, we are going to compile ffmpeg itself. Once again cd into your source
      directory, and execute the following commands, if you did not compile
      fdk-aac, you need to omit the --enable-libfdk-aac flag or you will get
      build errors:
        
        git clone --depth 1 git://source.ffmpeg.org/ffmpeg
        cd ffmpeg
        ./configure --enable-gpl --enable-libass --enable-libfaac \ 
          --enable-libfdk-aac --enable-libmp3lame \
          --enable-libopencore-amrnb --enable-libopencore-amrwb \
          --enable-librtmp --enable-libtheora --enable-libvorbis \
          --enable-x11grab --enable-libx264 --enable-nonfree --enable-version3 \
          --enable-shared --disable-static
        make
        sudo checkinstall --pkgname=ffmpeg --pkgversion="$(date +%Y%m%d)-git" \
          --backup=no --deldoc=yes --fstrans=no --default
        hash -r

    - OBS Studio
    Once again, all you need to do is cd back to your source directory and
    execute the following commands:
    
      git clone https://github.com/jp9000/obs-studio.git
      cd obs-studio
      mkdir build && cd build
      cmake -DUNIX_STRUCTURE=1 -DCMAKE_INSTALL_PREFIX=/usr ..
      make
      sudo checkinstall --pkgname=obs-studio \
        --pkgversion="$(date +%Y%m%d)-git" --backup=no --deldoc=yes \
        --fstrans=no --default

    - Libraries
    There is one strange thing about checkinstall, it installs all of the
    libraries we created to the /usr/local/lib directory. However, the ld linker
    only looks in /usr/lib, so we need to tell it to check /usr/local/lib as
    well. We can do this by editing the /etc/ld.so.conf file. So, from anywhere
    on your PC, execute the following command:
    
      sudo editor /etc/ld.so.conf
      
    This command will open the ld linker config file in your default text
    editor, all we need to do from here is add the following line to this file:
    
      /usr/local/lib
      
    That's it, just save and close the file, and ld will now look in
    /usr/local/lib, in addition to it's regular locations.
    
    
  - Build OBS in portable mode
    In the event that you want to build OBS as a portable application, you can
    execute the followinf commands in place of the ones executed earlier:
    
      mkdir build && cd build
      cmake -DUNIX_STRUCTURE=0 \
        -DCMAKE_INSTALL_PREFIX="${HOME}/obs-studio-portable" ..
      make -j4 && make install
      
    After that you should have a portable install in ~/obs-studio-portable
    Change to bin/64bit or bin/32bit and run ./obs to run it.
