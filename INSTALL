Compilation instructions!  Temporary quick compilation instructions!
Will give better instructions later when things are in a more complete state.

Windows:
  - NOTE: OBS on windows currently requires VS2013, as obs-studio uses C99 and
    C++11.  Express might not be supported at this time (though I'll fix it at
    some point).

  - Clone the repo.  After cloning, run the following git commands:
        git submodule init
        git submodule update
    which will download submodules.

  - Download (or build) development packages of FFmpeg, x264, Qt5.

  - Download windows version of cmake from: http://www.cmake.org/

  - Add windows environment variables:
        FFMpegPath    (path to FFmpeg include directory)
        x264Path      (path to x264 include directory)
        QTDIR         (path to Qt build base directory)

    NOTE: Each of these environment variables can specify 32bit and 64bit by
    appending 32 and 64 to the end of the environment variable names.
    So if you want to separate locations for 32bit or 64bit, you can set:
    FFmpegPath32, FFmpegPath64, x264Path32, x264Path64, QTDIR32, QTDIR64, etc.

    NOTE: These variables are optional and these can be entered in to cmake
    while generating, but having these variables makes life much easier in case
    you need to regenerate your cmake data from scratch for whatever reason.

    NOTE: An example Qt directory you would use here if you installed Qt5 to
    D:\Qt would usually look something like this for the 32bit version:
        D:\Qt\5.3\msvc2013
    And something like this for the 64bit version
        D:\Qt\5.3\msvc2013_64

    NOTE: Search paths and search order for FFmpeg and x264 library/binary
    files, relative to their include directories:

        Library files
          ../lib
          ../lib32 (if 32bit)
          ../lib64 (if 64bit)
          ./lib
          ./lib32 (if 32bit)
          ./lib64 (if 64bit)

        Binary files:
          ../bin
          ../bin32 (if 32bit)
          ../bin64 (if 64bit)
          ./bin
          ./bin32 (if 32bit)
          ./bin64 (if 64bit)

  - Run cmake-gui.  In "where is the source code", enter in the repo directory
    (example: D:/obs).  In "where to build the binaries", enter the repo
    directory path with the 'build' subdirectory (example: D:/obs/build).

    NOTE: The subdirectories 'build', 'release', and 'debug' are meant for
    builds, and are excluded from the repo in .gitignore, so they are safe to
    use for building.

  - Press 'Configure', then enable the COPY_DEPENDENCIES option, then press
    'Configure' again, and then press 'Generate' to generate visual studio
    project files in the 'build' subdirectory.

  - Open obs-studio.sln from the 'build' subdirectory, and it should run and
    be good to go.  All required dependencies should be copied on compile and
    it should be a fully fuctional build environment.


Mac OSX
  - Use macports or homebrew and install FFmpeg, x264, Qt5, and cmake.

    NOTE: Qt5 can also be downloaded/installed via the Qt website, though keep
    in mind that you will have to set the QTDIR environment variable to the
    Qt5 build base directory.

  - Make sure to have the OSX 10.9 or newer SDK installed (comes with recent
    versions of Xcode)

  - In a terminal, go to the obs-studio directory create a 'build' sub
    directory and change to it, then to build, type:

      - on OSX 10.9 or newer:
          cmake .. && make
      - on OSX 10.8:
          MACOSX_DEPLOYMENT_TARGET=10.8 cmake -DCMAKE_OSX_SYSROOT=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk/ .. && make

  - It builds in a modular structure by default.  To run it via terminal, go to
    build/rundir/RelWithDebInfo/bin, then type ./obs to run.

    NOTE: If you are running via command prompt, you *must* be in the 'bin'
    directory specified above, otherwise it will not be able to find its files
    relative to the binary.

  - To create an app bundle instead, use the command: make package
    This will create a .dmg file with an app bundle inside.


# How to compile OBS Studio from source

## Prerequisites
The first and most important thing we need to do is remove any precompiled packages installed on the
system. This is done via your package manager, the code snippet below is for Ubuntu/Debian based systems.
```
sudo apt-get remove ffmpeg x264 libav-tools libvpx-dev libx264-dev yasm
```

Next, we need to install a few packages. You may need to consult your package managers repo for a
specific list of packages, again the command below is for Ubuntu.
```
sudo apt-get update
sudo apt-get -y install autoconf build-essential checkinstall git libass-dev libfaac-dev \
  libgpac-dev libjack-jackd2-dev libmp3lame-dev libopencore-amrnb-dev libopencore-amrwb-dev \
  librtmp-dev libsdl1.2-dev libtheora-dev libtool libva-dev libvdpau-dev libvorbis-dev \
  libx11-dev libxext-dev libxfixes-dev pkg-config texi2html zlib1g-dev libpulse-dev qtbase5-dev \
  libqt5x11extras5-dev libxinerama-dev libxcomposite-dev libxrandr-dev cmake libv4l-dev libudev-dev

## Building the software
Now that we have all of the neccessary packages installed, we can continue with the build
process. First, we need to compile some prerequisites for FFMPEG.

You are more than welcome to complete your builds wherever you feel comfortable. Personally, I
like to create a directory on the root of my filesystem exclusively for building packages, I
call this directory build, and I create it as such
```
sudo mkdir /build
sudo chown {{USER}} /build
chmod -R 0777 /build
cd /build
```

Now that we are in our build directory, we need to retrieve and build our first package, YASM.
It should be noted that when installing packages, we are using checkinstall and NOT make install,
we do this so that our package manager can handle updates and package removal. Anytime the make
command is used, you can substitute `make -j#`, where # is 2 times the number of THREADS your
processor has, so for most modern Intel processors, this will be 4 times the number of cores your
processor has. For example, an Intel Core i5-3230M (my processor) is a dual core processor, but it
is hyper-threaded, so it has 4 threads, thus my j# is 8, making my command `make -j8`. Unfortunately,
for AMD processors, this will usually simply be 2 times the number of cores your processor has. If in
doubt, consult `cat /proc/cpuinfo`

### YASM
In your build directory, simple execute the following commands.
```
wget http://www.tortall.net/projects/yasm/releases/yasm-1.2.0.tar.gz
tar xzvf yasm-1.2.0.tar.gz
cd yasm-1.2.0
./configure
make
sudo checkinstall --pkgname=yasm --pkgversion="1.2.0" --backup=no \
  --deldoc=yes --fstrans=no --default
```

### x264
```
cd /build
git clone --depth 1 git://git.videolan.org/x264
cd x264
./configure --enable-shared
make
sudo checkinstall --pkgname=x264 --pkgversion="3:$(./version.sh | \
  awk -F'[" ]' '/POINT/{print $4"+git"$5}')" --backup=no --deldoc=yes \
  --fstrans=no --default
```


### FDK-AAC
```
cd /build
git clone --depth 1 git://github.com/mstorsjo/fdk-aac.git
cd fdk-aac
autoreconf -fiv
./configure --enable-shared
make
sudo checkinstall --pkgname=fdk-aac --pkgversion="$(date +%Y%m%d%H%M)-git" --backup=no \
  --deldoc=yes --fstrans=no --default
```

### libvpx
```
cd /build
git clone http://git.chromium.org/webm/libvpx.git
cd libvpx
./configure --disable-examples --disable-unit-tests --enable-shared
make
sudo checkinstall --pkgname=libvpx --pkgversion="1:$(date +%Y%m%d%H%M)-git" --backup=no \
  --deldoc=yes --fstrans=no --default
```

### libopus
This library is technically optional, but it's always helpful to have in case you should need it for something.
```
cd /build
git clone --depth 1 git://git.xiph.org/opus.git
cd opus
./autogen.sh
./configure --enable-shared
make
sudo checkinstall --pkgname=libopus --pkgversion="$(date +%Y%m%d%H%M)-git" --backup=no \
  --deldoc=yes --fstrans=no --default
```

### FFMPEG
Now, it's time for the big kahuna, FFMPEG itself, however, it's just as simple as all of the others.
```
cd /build
git clone --depth 1 git://source.ffmpeg.org/ffmpeg
cd ffmpeg
./configure --enable-gpl --enable-libass --enable-libfaac --enable-libfdk-aac --enable-libmp3lame \
  --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-librtmp --enable-libtheora \
  --enable-libvorbis --enable-libvpx --enable-x11grab --enable-libx264 --enable-nonfree --enable-version3 \
  --enable-libopus --enable-shared --disable-static
make
sudo checkinstall --pkgname=ffmpeg --pkgversion="7:$(date +%Y%m%d%H%M)-git" --backup=no \
  --deldoc=yes --fstrans=no --default
hash -r
```

### OBS Studio
```
cd /build
git clone https://github.com/jp9000/obs-studio.git
cd obs-studio
mkdir build && cd build
cmake -DUNIX_STRUCTURE=1 -DCMAKE_INSTALL_PREFIX=/usr ..
make
sudo checkinstall --pkgname=obs-studio --pkgversion="$(date +%Y%m%d%H%M)-git" --backup=no \
  --deldoc=yes --fstrans=no --default
```

## Handling libraries
There is one major flaw with this guide. All of the libraries we built earlier are in the wrong spot.
OBS Studio is going to look in the `/usr/lib` directory for all of the libraries on launch, but all
of our libraries are located in the `/usr/local/lib` directory. The code snippet below will fix this
issue, BUT IT IS A VERY, VERY DIRTY FIX. This will symlink EVERY library in the `/usr/local/lib`
directory to the `/usr/lib` directory. USE WITH CAUTION.
```
cd /usr/local/lib
sudo su
for a in *;
do ln -s /usr/local/lib/$a /usr/lib/$a;
done
```

## Done
That's it, you're done. The configuration above is setup so that any feature coded into 
OBS Studio (which at the moment isn't too terribly much) is included in your configuration.
This includes support for capture cards, read capture cards when they are supported and decide to work.

## EXTRA: Build OBS in portable mode
To build in portable mode(assuming you are in a terminal in the obs-studio base dir):
    
    mkdir build && cd build
    cmake -DUNIX_STRUCTURE=0 -DCMAKE_INSTALL_PREFIX="${HOME}/obs-studio-portable" ..
    make -j4 && make install

  - After that you should have a portable install in ~/obs-studio-portable
    Change to bin/64bit or bin/32bit and run ./obs to run it.
