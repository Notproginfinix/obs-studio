/*
 * Copyright (c) 2015 Ruwen Hahn <palana@stunned.de>
 *                    John R. Bradley <jrb@turrettech.com>
 *                    Hugh Bailey "Jim" <obs.jim@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

uniform float4x4 ViewProj;
uniform texture2d image;
uniform float4x4 color_matrix;
uniform float3 color_range_min = {0.0, 0.0, 0.0};
uniform float3 color_range_max = {1.0, 1.0, 1.0};

uniform texture2d previous_image;
uniform float2 dimensions;
uniform int field_order;
uniform bool frame2;

sampler_state textureSampler {
	Filter    = Linear;
	AddressU  = Clamp;
	AddressV  = Clamp;
};

struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

int3 select(int2 texel, int x, int y)
{
	return int3(texel + int2(x, y), 0);
}

#include "deinterlace_impl.effect"
#define MATRIX_FUNCTIONS 1
#include "deinterlace_impl.effect"
#undef MATRIX_FUNCTIONS

int2 pixel_uv(float2 uv)
{
	return int2(uv * dimensions);
}

float4 PSYadifMode0RGBA(VertData v_in, bool from601, bool from709) : TARGET
{
	return texel_at_yadif(pixel_uv(v_in.uv), field_order, true, from601, from709);
}

float4 PSYadifMode0RGBA_2x(VertData v_in, bool from601, bool from709) : TARGET
{
	return texel_at_yadif_2x(pixel_uv(v_in.uv), field_order, true, from601, from709);
}

float4 PSYadifMode2RGBA(VertData v_in, bool from601, bool from709) : TARGET
{
	return texel_at_yadif(pixel_uv(v_in.uv), field_order, false, from601, from709);
}

float4 PSYadifMode2RGBA_2x(VertData v_in, bool from601, bool from709) : TARGET
{
	return texel_at_yadif_2x(pixel_uv(v_in.uv), field_order, false, from601, from709);
}

float4 PSYadifDiscardRGBA(VertData v_in, bool from601, bool from709) : TARGET
{
	return texel_at_yadif_discard(pixel_uv(v_in.uv), field_order, from601, from709);
}

float4 PSYadifDiscardRGBA_2x(VertData v_in, bool from601, bool from709) : TARGET
{
	return texel_at_yadif_discard_2x(pixel_uv(v_in.uv), field_order, from601, from709);
}

float4 PSLinearRGBA(VertData v_in, bool from601, bool from709) : TARGET
{
	return texel_at_linear(pixel_uv(v_in.uv), field_order, from601, from709);
}

float4 PSLinearRGBA_2x(VertData v_in, bool from601, bool from709) : TARGET
{
	return texel_at_linear_2x(pixel_uv(v_in.uv), field_order, from601, from709);
}

float4 PSDiscardRGBA(VertData v_in, bool from601, bool from709) : TARGET
{
	return texel_at_discard(pixel_uv(v_in.uv), field_order, from601, from709);
}

float4 PSDiscardRGBA_2x(VertData v_in, bool from601, bool from709) : TARGET
{
	return texel_at_discard_2x(pixel_uv(v_in.uv), field_order, from601, from709);
}

float4 PSBlendRGBA(VertData v_in, bool from601, bool from709) : TARGET
{
	return texel_at_blend(pixel_uv(v_in.uv), field_order, from601, from709);
}

float4 PSBlendRGBA_2x(VertData v_in, bool from601, bool from709) : TARGET
{
	return texel_at_blend_2x(pixel_uv(v_in.uv), field_order, from601, from709);
}

float4 PSYadifMode0Matrix(VertData v_in, bool from601, bool from709) : TARGET
{
	return texel_at_yadif_matrix(pixel_uv(v_in.uv), field_order, true, from601, from709);
}

float4 PSYadifMode0Matrix_2x(VertData v_in, bool from601, bool from709) : TARGET
{
	return texel_at_yadif_2x_matrix(pixel_uv(v_in.uv), field_order, true, from601, from709);
}

float4 PSYadifMode2Matrix(VertData v_in, bool from601, bool from709) : TARGET
{
	return texel_at_yadif_matrix(pixel_uv(v_in.uv), field_order, false, from601, from709);
}

float4 PSYadifMode2Matrix_2x(VertData v_in, bool from601, bool from709) : TARGET
{
	return texel_at_yadif_2x_matrix(pixel_uv(v_in.uv), field_order, false, from601, from709);
}

float4 PSYadifDiscardMatrix(VertData v_in, bool from601, bool from709) : TARGET
{
	return texel_at_yadif_discard_matrix(pixel_uv(v_in.uv), field_order, from601, from709);
}

float4 PSYadifDiscardMatrix_2x(VertData v_in, bool from601, bool from709) : TARGET
{
	return texel_at_yadif_discard_2x_matrix(pixel_uv(v_in.uv), field_order, from601, from709);
}

float4 PSLinearMatrix(VertData v_in, bool from601, bool from709) : TARGET
{
	return texel_at_linear_matrix(pixel_uv(v_in.uv), field_order, from601, from709);
}

float4 PSLinearxMatrixA_2x(VertData v_in, bool from601, bool from709) : TARGET
{
	return texel_at_linear_2x_matrix(pixel_uv(v_in.uv), field_order, from601, from709);
}

float4 PSDiscardMatrix(VertData v_in, bool from601, bool from709) : TARGET
{
	return texel_at_discard_matrix(pixel_uv(v_in.uv), field_order, from601, from709);
}

float4 PSDiscardMatrix_2x(VertData v_in, bool from601, bool from709) : TARGET
{
	return texel_at_discard_2x_matrix(pixel_uv(v_in.uv), field_order, from601, from709);
}

float4 PSBlendMatrix(VertData v_in, bool from601, bool from709) : TARGET
{
	return texel_at_blend_matrix(pixel_uv(v_in.uv), field_order, from601, from709);
}

float4 PSBlendMatrix_2x(VertData v_in, bool from601, bool from709) : TARGET
{
	return texel_at_blend_2x_matrix(pixel_uv(v_in.uv), field_order, from601, from709);
}

VertData VSDefault(VertData v_in)
{
	VertData vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;
	return vert_out;
}

#define TECHNIQUE(rgba_ps, matrix_ps, matrix_from_601_ps, matrix_from_709_ps) \
technique Draw \
{ \
	pass \
	{ \
		vertex_shader = VSDefault(v_in); \
		pixel_shader  = rgba_ps(v_in, false, false); \
	} \
} \
float4 matrix_from_601_ps(VertData v_in) : TARGET \
{ \
	return matrix_ps(v_in, true, false); \
} \
float4 matrix_from_709_ps(VertData v_in) : TARGET \
{ \
	return matrix_ps(v_in, false, true); \
} \
\
technique DrawMatrixFrom601 \
{ \
	pass \
	{ \
		vertex_shader = VSDefault(v_in); \
		pixel_shader  = matrix_from_601_ps(v_in); \
	} \
} \
technique DrawMatrixFrom709 \
{ \
	pass \
	{ \
		vertex_shader = VSDefault(v_in); \
		pixel_shader  = matrix_from_709_ps(v_in); \
	} \
}
