/*
 * lanczos sharper
 * note - this shader is adapted from the GPL bsnes shader, very good stuff
 * there.
 */

#include "colorspace_helpers.effect"

uniform float4x4 ViewProj;
uniform texture2d image;
uniform float4x4 color_matrix;
uniform float3 color_range_min = {0.0, 0.0, 0.0};
uniform float3 color_range_max = {1.0, 1.0, 1.0};
uniform float2 base_dimension_i;
uniform float undistort_factor = 1.0;

sampler_state textureSampler
{
	AddressU  = Clamp;
	AddressV  = Clamp;
	Filter    = Linear;
};

struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

struct FragData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
	float2 scale  : TEXCOORD1;
};

FragData VSDefault(VertData v_in)
{
	FragData vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;
	vert_out.scale = min(0.25 + abs(0.75 / mul(float4(1.0 / base_dimension_i.xy, 1.0, 1.0), ViewProj).xy), 1.0);

	return vert_out;
}

float sinc(float x)
{
	const float PIval = 3.1415926535897932384626433832795;
	return sin(x * PIval) / (x * PIval);
}

float weight(float x, float radius)
{
	float ax = abs(x);
	if (x == 0.0)
		return 1.0;
	else if (ax < radius)
		return sinc(x) * sinc(x / radius);
	else
		return 0.0;
}

float3 weight3(float x, float scale)
{
	return float3(
		weight((x * 2.0 + 0.0 * 2.0 - 3.0) * scale, 3.0),
		weight((x * 2.0 + 1.0 * 2.0 - 3.0) * scale, 3.0),
		weight((x * 2.0 + 2.0 * 2.0 - 3.0) * scale, 3.0));
}

float AspectUndistortX(float x, float a)
{
	// The higher the power, the longer the linear part will be.
	return (1.0 - a) * (x * x * x * x * x) + a * x;
}

float AspectUndistortU(float u)
{
	// Normalize texture coord to -1.0 to 1.0 range, and back.
	return AspectUndistortX((u - 0.5) * 2.0, undistort_factor) * 0.5 + 0.5;
}

float2 pixel_coord(float xpos, float ypos)
{
	return float2(AspectUndistortU(xpos), ypos);
}

#include "lanczos_scale_impl.effect"
#define MATRIX_FUNCTIONS 1
#include "lanczos_scale_impl.effect"
#undef MATRIX_FUNCTIONS

float4 DrawLanczosRGBA(FragData v_in, bool undistort, bool from601, bool from709)
{
	return draw_lanczos(v_in, undistort, from601, from709);
}

float4 DrawLanczosMatrix(FragData v_in, bool from601, bool from709)
{
	return draw_lanczos_matrix(v_in, false, from601, from709);
}

float4 PSDrawLanczosRGBA(FragData v_in, bool undistort) : TARGET
{
	return DrawLanczosRGBA(v_in, undistort, false, false);
}

float4 PSDrawLanczosRGBAFrom601(FragData v_in) : TARGET
{
	return DrawLanczosRGBA(v_in, false, true, false);
}

float4 PSDrawLanczosRGBATo601(FragData v_in) : TARGET
{
	const float4 color = DrawLanczosRGBA(v_in, false, false, false);
	return float4(GammaSrgbToGamma601(color.rgb), color.a);
}

float4 PSDrawLanczosRGBAFrom709(FragData v_in) : TARGET
{
	return DrawLanczosRGBA(v_in, false, false, true);
}

float4 PSDrawLanczosRGBATo709(FragData v_in) : TARGET
{
	const float4 color = DrawLanczosRGBA(v_in, false, false, false);
	return float4(GammaSrgbToGamma709(color.rgb), color.a);
}

float4 PSDrawLanczosMatrixFrom601(FragData v_in) : TARGET
{
	return DrawLanczosMatrix(v_in, true, false);
}

float4 PSDrawLanczosMatrixTo601(FragData v_in) : TARGET
{
	const float4 sample = draw_lanczos(v_in, false, false, false);
	const float3 color = GammaSrgbToGamma601(sample.rgb);
	const float3 clampedColor = clamp(color, color_range_min, color_range_max);
	return saturate(mul(float4(clampedColor, 1.0), color_matrix));
}

float4 PSDrawLanczosMatrixFrom709(FragData v_in) : TARGET
{
	return DrawLanczosMatrix(v_in, false, true);
}

float4 PSDrawLanczosMatrixTo709(FragData v_in) : TARGET
{
	const float4 sample = draw_lanczos(v_in, false, false, false);
	const float3 color = GammaSrgbToGamma709(sample.rgb);
	const float3 clampedColor = clamp(color, color_range_min, color_range_max);
	return saturate(mul(float4(clampedColor, 1.0), color_matrix));
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDrawLanczosRGBA(v_in, false);
	}
}

technique DrawFrom601
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDrawLanczosRGBAFrom601(v_in);
	}
}

technique DrawTo601
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDrawLanczosRGBATo601(v_in);
	}
}

technique DrawFrom709
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDrawLanczosRGBAFrom709(v_in);
	}
}

technique DrawTo709
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDrawLanczosRGBATo709(v_in);
	}
}

technique DrawUndistort
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDrawLanczosRGBA(v_in, true);
	}
}

technique DrawMatrixFrom601
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDrawLanczosMatrixFrom601(v_in);
	}
}

technique DrawMatrixTo601
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDrawLanczosMatrixTo601(v_in);
	}
}

technique DrawMatrixFrom709
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDrawLanczosMatrixFrom709(v_in);
	}
}

technique DrawMatrixTo709
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDrawLanczosMatrixTo709(v_in);
	}
}
