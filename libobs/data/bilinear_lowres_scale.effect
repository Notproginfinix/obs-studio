/*
 * bilinear low res scaling, samples 9 pixels of a larger image to scale to a
 * low resolution image below half size
 */

#include "colorspace_helpers.effect"

uniform float4x4 ViewProj;
uniform texture2d image;
uniform float4x4 color_matrix;
uniform float3 color_range_min = {0.0, 0.0, 0.0};
uniform float3 color_range_max = {1.0, 1.0, 1.0};
uniform float2 base_dimension_i;

sampler_state textureSampler {
	Filter    = Linear;
	AddressU  = Clamp;
	AddressV  = Clamp;
};

struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertData VSDefault(VertData v_in)
{
	VertData vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;
	return vert_out;
}

#include "bilinear_lowres_scale_impl.effect"
#define MATRIX_FUNCTIONS 1
#include "bilinear_lowres_scale_impl.effect"
#undef MATRIX_FUNCTIONS

float4 PSDrawLowresBilinearRGBA(VertData v_in) : TARGET
{
	return DrawLowresBilinear(v_in, false, false);
}

float4 PSDrawLowresBilinearRGBAFrom601(VertData v_in) : TARGET
{
	return DrawLowresBilinear(v_in, true, false);
}

float4 PSDrawLowresBilinearRGBATo601(VertData v_in) : TARGET
{
	const float4 color = DrawLowresBilinear(v_in, false, false);
	return float4(GammaSrgbToGamma601(color.rgb), color.a);
}

float4 PSDrawLowresBilinearRGBAFrom709(VertData v_in) : TARGET
{
	return DrawLowresBilinear(v_in, false, true);
}

float4 PSDrawLowresBilinearRGBATo709(VertData v_in) : TARGET
{
	const float4 color = DrawLowresBilinear(v_in, false, false);
	return float4(GammaSrgbToGamma709(color.rgb), color.a);
}

float4 PSDrawLowresBilinearMatrixFrom601(VertData v_in) : TARGET
{
	return DrawLowresBilinearMatrix(v_in, true, false);
}

float4 PSDrawLowresBilinearMatrixTo601(VertData v_in) : TARGET
{
	const float4 sample = DrawLowresBilinear(v_in, false, false);
	const float3 color = GammaSrgbToGamma601(sample.rgb);
	const float3 clampedColor = clamp(color, color_range_min, color_range_max);
	return saturate(mul(float4(clampedColor, 1.0), color_matrix));
}

float4 PSDrawLowresBilinearMatrixFrom709(VertData v_in) : TARGET
{
	return DrawLowresBilinearMatrix(v_in, false, true);
}

float4 PSDrawLowresBilinearMatrixTo709(VertData v_in) : TARGET
{
	const float4 sample = DrawLowresBilinear(v_in, false, false);
	const float3 color = GammaSrgbToGamma709(sample.rgb);
	const float3 clampedColor = clamp(color, color_range_min, color_range_max);
	return saturate(mul(float4(clampedColor, 1.0), color_matrix));
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDrawLowresBilinearRGBA(v_in);
	}
}

technique DrawFrom601
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDrawLowresBilinearRGBAFrom601(v_in);
	}
}

technique DrawTo601
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDrawLowresBilinearRGBATo601(v_in);
	}
}

technique DrawFrom709
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDrawLowresBilinearRGBAFrom709(v_in);
	}
}

technique DrawTo709
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDrawLowresBilinearRGBATo709(v_in);
	}
}

technique DrawMatrixFrom601
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDrawLowresBilinearMatrixFrom601(v_in);
	}
}

technique DrawMatrixTo601
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDrawLowresBilinearMatrixTo601(v_in);
	}
}

technique DrawMatrixFrom709
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDrawLowresBilinearMatrixFrom709(v_in);
	}
}

technique DrawMatrixTo709
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDrawLowresBilinearMatrixTo709(v_in);
	}
}
