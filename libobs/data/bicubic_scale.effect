/*
 * bicubic sharper (better for downscaling)
 * note - this shader is adapted from the GPL bsnes shader, very good stuff
 * there.
 */

#include "colorspace_helpers.effect"

uniform float4x4 ViewProj;
uniform texture2d image;
uniform float4x4 color_matrix;
uniform float3 color_range_min = {0.0, 0.0, 0.0};
uniform float3 color_range_max = {1.0, 1.0, 1.0};
uniform float2 base_dimension_i;
uniform float undistort_factor = 1.0;

sampler_state textureSampler {
	Filter    = Linear;
	AddressU  = Clamp;
	AddressV  = Clamp;
};

struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertData VSDefault(VertData v_in)
{
	VertData vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;
	return vert_out;
}

float weight(float x)
{
	float ax = abs(x);

	/* Sharper version.  May look better in some cases. */
	const float B = 0.0;
	const float C = 0.75;

	if (ax < 1.0)
		return (pow(x, 2.0) *
			((12.0 - 9.0 * B - 6.0 * C) * ax +
				(-18.0 + 12.0 * B + 6.0 * C)) +
				(6.0 - 2.0 * B))
			/ 6.0;
	else if ((ax >= 1.0) && (ax < 2.0))
		return (pow(x, 2.0) *
			((-B - 6.0 * C) * ax + (6.0 * B + 30.0 * C)) +
				(-12.0 * B - 48.0 * C) * ax +
				(8.0 * B + 24.0 * C))
			/ 6.0;
	else
		return 0.0;
}

float4 weight4(float x)
{
	return float4(
		weight(x - 2.0),
		weight(x - 1.0),
		weight(x),
		weight(x + 1.0));
}

float AspectUndistortX(float x, float a)
{
	// The higher the power, the longer the linear part will be.
	return (1.0 - a) * (x * x * x * x * x) + a * x;
}

float AspectUndistortU(float u)
{
	// Normalize texture coord to -1.0 to 1.0 range, and back.
	return AspectUndistortX((u - 0.5) * 2.0, undistort_factor) * 0.5 + 0.5;
}

float2 pixel_coord(float xpos, float ypos)
{
	return float2(AspectUndistortU(xpos), ypos);
}

#include "bicubic_scale_impl.effect"
#define MATRIX_FUNCTIONS 1
#include "bicubic_scale_impl.effect"
#undef MATRIX_FUNCTIONS

float4 PSDrawBicubicRGBA(VertData v_in, bool undistort) : TARGET
{
	return DrawBicubic(v_in, undistort, false, false);
}

float4 PSDrawBicubicRGBAFrom601(VertData v_in, bool undistort) : TARGET
{
	return DrawBicubic(v_in, false, true, false);
}

float4 PSDrawBicubicRGBATo601(VertData v_in, bool undistort) : TARGET
{
	const float4 color = DrawBicubic(v_in, false, false, false);
	return float4(GammaSrgbToGamma601(color.rgb), color.a);
}

float4 PSDrawBicubicRGBAFrom709(VertData v_in, bool undistort) : TARGET
{
	return DrawBicubic(v_in, false, false, true);
}

float4 PSDrawBicubicRGBATo709(VertData v_in, bool undistort) : TARGET
{
	const float4 color = DrawBicubic(v_in, false, false, false);
	return float4(GammaSrgbToGamma709(color.rgb), color.a);
}

float4 PSDrawBicubicMatrixFrom601(VertData v_in) : TARGET
{
	return DrawBicubicMatrix(v_in, false, true, false);
}

float4 PSDrawBicubicMatrixTo601(VertData v_in) : TARGET
{
	const float4 sample = DrawBicubic(v_in, false, false, false);
	const float3 color = GammaSrgbToGamma601(sample.rgb);
	const float3 clampedColor = clamp(color, color_range_min, color_range_max);
	return saturate(mul(float4(clampedColor, 1.0), color_matrix));
}

float4 PSDrawBicubicMatrixFrom709(VertData v_in) : TARGET
{
	return DrawBicubicMatrix(v_in, false, false, true);
}

float4 PSDrawBicubicMatrixTo709(VertData v_in) : TARGET
{
	const float4 sample = DrawBicubic(v_in, false, false, false);
	const float3 color = GammaSrgbToGamma709(sample.rgb);
	const float3 clampedColor = clamp(color, color_range_min, color_range_max);
	return saturate(mul(float4(clampedColor, 1.0), color_matrix));
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDrawBicubicRGBA(v_in, false);
	}
}

technique DrawFrom601
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDrawBicubicRGBAFrom601(v_in, false);
	}
}

technique DrawTo601
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDrawBicubicRGBATo601(v_in, false);
	}
}

technique DrawFrom709
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDrawBicubicRGBAFrom709(v_in, false);
	}
}

technique DrawTo709
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDrawBicubicRGBATo709(v_in, false);
	}
}

technique DrawUndistort
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDrawBicubicRGBA(v_in, true);
	}
}

technique DrawMatrixFrom601
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDrawBicubicMatrixFrom601(v_in);
	}
}

technique DrawMatrixTo601
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDrawBicubicMatrixTo601(v_in);
	}
}

technique DrawMatrixFrom709
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDrawBicubicMatrixFrom709(v_in);
	}
}

technique DrawMatrixTo709
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDrawBicubicMatrixTo709(v_in);
	}
}
